{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome","text":"<p>The time is: , and all is well.</p> <p>This site is a work in progress, and I'm still structuring and evolving it. My play is to present some of my technical writing and maybe projects. Writing and sharing is a valuable part of learning.</p> <p>Things I find interesting:</p> <ul> <li>Physics</li> <li>Mathematics</li> <li>Engineering</li> <li>Computer programming</li> </ul> <p>The future is bright, and I'm excited to see what it holds. We are living in a time of useful tools and information. If we just get our act together, I bet we can and will do some amazing things.</p>"},{"location":"about/","title":"About","text":"<p>This is what I call the Victoriee Tech Journal! I journal and publish Tech stuff that I'm interested. It's a living project, as can be seen in the blog feed and on the last edited timestamps on most pages. Much of the things here are also cross posted to some other places; this site acts as my main tech-journal-hub. My personal interest and deeper study reaches some areas of mathematics, programming and engineering. The blog is an unstructured feed, that mainly just is a place for me to chronologically post things that I wanted to write about. Some more structured content might be in development, like guides and or science paper projects of mine, we'll see what the future have to offer.</p>"},{"location":"about/#using-my-site-for-machine-learning","title":"Using my site for Machine Learning","text":"<p>Yeah, sure! You got my permission, I would however appreciate some credit by mentioning what you trained your data on. My recommendation to do this is by 1. linking to this site and 2. including my permalink victoriee.eth.link</p> <pre><code>As a resource this LLM has been trained on data from VictorieeMan's Tech\nJournal https://tech.victoriee.com, victoriee.eth.link\n</code></pre> <p>To the best of my efforts, I aim to keep my sources updated on my site in blog posts and articles etc. For the people I've quoted or referenced plus for the quality of the LLM training, I believe citing my site if used is also most fair to those upstream of me.</p>"},{"location":"donate/","title":"Donate \ud83c\udf81","text":"<p>Visit https://victoriee.com/donate for supporting this ad-free website. Both one-time and recurring donations are welcome. Thank you for your support!</p>"},{"location":"donate/#bitcoin","title":"Bitcoin","text":"<ul> <li>BTC Pay: pay.withbitcoin.org (Preferred)</li> <li>BTC\u26a1: victorieeman@vida.page</li> <li>BTC paynym: +holyleaf977</li> </ul>"},{"location":"donate/#eth","title":"ETH","text":"<ul> <li>victoriee.eth</li> <li>0x4B2522fb509b38546F2973c391E3757D6130B02d</li> </ul>"},{"location":"donate/#visa-mastercard-stripe","title":"Visa / Mastercard [Stripe]:","text":""},{"location":"hire-me/","title":"Hire Me \ud83d\udcbc","text":"<p>I'm always open for opportunities interesting enough, this goes for both employments as single projects. Present your case, your salary / contract value, and I'll come back to you with my consideration.</p> <p>I'm particularly interested in opportunities outside the EU, especially in:</p> <ul> <li>the United States of America</li> <li>Switzerland</li> <li>Japan</li> </ul>"},{"location":"hire-me/#competences","title":"Competences","text":"<p>My primary interest concern technical problem-solving, and dealing with interesting people. I'm well traversed within programming, cross multiple languages and mathematics. If you find something interesting on my blog, it's something I've studied up on and likely have adjacent knowledge around. You can judge your self if I'm a good match for your kind of project, upon contact I will fill you in on my assesment.</p> <p>I'm flexible across tech stacks and languages, but these are my favorites:</p> <p></p>"},{"location":"hire-me/#portfolio","title":"Portfolio","text":"<p>For coding I got my github page, but it's not structured as a portfolio at the moment. When I got a structured portfolio in order I'll let you know, by linking it here.</p> <p>This site is btw. a mkdocs site, that I have adapted into being a place for my personal Tech Journal.</p>"},{"location":"hire-me/#language-skills","title":"Language skills","text":"<ul> <li>Swedish, native level</li> <li>English, fluent (C2) Proficient User</li> <li>German, (B1) independent user</li> <li>Japanese, (A1) beginner</li> </ul>"},{"location":"hire-me/#contact","title":"Contact","text":"<p>To keep things things simple, as I like. You can publicly @ me at X twitter.com for free or privately pay the spam filtering over at my Vida Page and I'll get back to you.</p> <ul> <li>https://twitter.com/VictorieeMan</li> <li>https://vida.page/victorieeman</li> </ul>"},{"location":"rust/","title":"Rust \ud83e\udd80","text":"<p>Resources: The rust programming language Book: https://doc.rust-lang.org/book/</p>"},{"location":"blog/","title":"Blog Feed","text":""},{"location":"blog/#main-categories","title":"Main categories","text":"<ul> <li>Mathematics</li> <li>Programming</li> </ul> <p>For extensive list visit the Taxonomy page.</p>"},{"location":"blog/#how-to-subscribe-to-the-feed","title":"How to subscribe to the feed","text":"<p>I'll aim to reposting some stuff to Medium and nostr. Letting them deal with email lists, comment fields etc. is easier for me. This site is however the ground truth and the place I'll update first. If any of the following platforms please you, check them out.</p>"},{"location":"blog/#rss","title":"RSS","text":"<p>I'm considering this feature to be implemented, but it's not a priority. Maybe, in the future :)</p>"},{"location":"blog/#nostr","title":"Nostr","text":"<p>Also looking into forwarding posts to https://yakihonne.com at the nostr network.</p>"},{"location":"blog/#medium","title":"Medium","text":"<p>https://medium.com/@VictorieeMan/subscribe</p>"},{"location":"blog/#support-donate","title":"Support &amp; Donate \ud83c\udf81","text":"<p>Visit https://victoriee.com/donate for supporting this ad-free website. Both one-time and recurring donations are welcome. Thank you for your support!</p>"},{"location":"blog/#bitcoin","title":"Bitcoin","text":"<ul> <li>BTC Pay: pay.withbitcoin.org (Preferred)</li> <li>BTC\u26a1: victorieeman@vida.page</li> <li>BTC paynym: +holyleaf977</li> </ul>"},{"location":"blog/#eth","title":"ETH","text":"<ul> <li>victoriee.eth</li> <li>0x4B2522fb509b38546F2973c391E3757D6130B02d</li> </ul>"},{"location":"blog/#visa-mastercard-stripe","title":"Visa / Mastercard [Stripe]:","text":""},{"location":"blog/#blog-feed-below","title":"Blog feed below: \ud83d\udc47","text":""},{"location":"blog/contact/","title":"Contact","text":"<p>To keep things things simple, as I like. You can publicly @ me at X twitter.com for free or privately pay the spam filtering over at my Vida Page and I'll get back to you.</p> <ul> <li>https://twitter.com/VictorieeMan</li> <li>https://vida.page/victorieeman</li> </ul> <p>I accept both these channels for whatever kind of contact you have in mind, professional or otherwise. Reasons for contact might include: a friendly \"hi\", consulting questions, inquiry to hire me, expertise or questions about my published content, general inquiries etc.</p>"},{"location":"blog/contact/#tips-tricks-when-looking-to-hire-me","title":"Tips &amp; tricks when looking to \"Hire me\"","text":"<p>Intrigue me with your project and or business, but stay honest and upfront about the essentials. Mainly I'm interested in opportunities that involve working with great people, be it smartness or good vibeness. Salary &amp; or contract payment, is important but mainly to help value where to best spend my energy and time in relation to other opportunities.</p>"},{"location":"blog/contact/#tips-tricks-when-looking-for-help","title":"Tips &amp; tricks when looking for help","text":"<p>Ask on @ me on twitter and just ask! If interesting enough and I have time for it, I'm open to some pro bono stuff for minor single time &amp; or very impactful things. Attaching some money to it, would however increase my incentive of course.</p>"},{"location":"blog/contact/#wanting-to-comment-on-my-posts","title":"Wanting to comment on my posts?","text":"<p>Either just share the post with some comments on twitter and remember to at me, or see if you can find the article on medium or nostr.</p>"},{"location":"blog/taxonomy/","title":"Taxonomy","text":""},{"location":"blog/taxonomy/#categories","title":"Categories","text":"<ul> <li>Mathematics<ul> <li>Probability Theory</li> </ul> </li> <li>Programming</li> </ul>"},{"location":"blog/taxonomy/#tags","title":"Tags","text":"<p>Following is a list of all existing tags:</p>"},{"location":"blog/taxonomy/#su-mt3001","title":"SU-MT3001","text":"<ul> <li>Basic probability theory, MT3001 module 1 / 15</li> </ul>"},{"location":"blog/taxonomy/#debugging","title":"debugging","text":"<ul> <li>Adding custom libraries to the flutter apk build</li> </ul>"},{"location":"blog/taxonomy/#solution","title":"solution","text":"<ul> <li>Adding custom libraries to the flutter apk build</li> </ul>"},{"location":"blog/2024/01/22/adding-custom-libraries-to-the-flutter-apk-build/","title":"Adding custom libraries to the flutter apk build","text":"<p>If you are developing an android app in flutter and your apk compilation step works, but then runtime halts on the following error: \"ArgumentError (Invalid argument(s): Failed to load dynamic library 'libhub.so': dlopen failed: library \"libc++_shared.so\" not found\"</p> <p><pre><code>Exception has occurred.\nArgumentError (Invalid argument(s): Failed to load dynamic library 'libhub.so': dlopen failed: library \"libc++_shared.so\" not found: needed by /data/app/[...]/lib/x86_64/libhub.so in namespace classloader-namespace)\n</code></pre> Then you have something in your code that uses this library to run properly. Ideally flutter together with Gradle is supposed to do everything of this kind of library packaging for you, so step one is to check that your basic configuration is correct. It's generally advisable to not have to do custom solutions like this one, and first see what you can do within standard flutter dependency management using <code>flutter pub get &lt;package&gt;</code> commands and or by dart solutions like the dart:ffi package.</p> <p>But if that leads to a dead end, I'll offer you a more hands-on approach here. By manually adding the <code>libc++_shared.so</code> to your flutter project so that it gets included into the apk on build.</p>","tags":["debugging","solution"]},{"location":"blog/2024/01/22/adding-custom-libraries-to-the-flutter-apk-build/#how-to-add-libc_sharedso-to-your-flutter-apk","title":"How to add <code>libc++_shared.so</code> to your flutter apk","text":"<p>Flutter lets you do some platform specific customizations, by editing the platform folders. We want to go to this folder <code>android/app/src/main/</code> in our flutter project structure, and <code>mkdir jniLib</code>. Then <code>cd</code> into that folder and create the following file structure: <pre><code>/jniLib/.\n        \u251c\u2500\u2500 arm64-v8a\n        \u251c\u2500\u2500 armeabi-v7a\n        \u251c\u2500\u2500 x86\n        \u2514\u2500\u2500 x86_64\n</code></pre> Whatever is placed in these folders, Gradle will make sure to add within the <code>/libs/</code> folder of your apk file, making its content available for your android app as libraries. Create the folders manually or <code>cd</code>  to <code>jniLib</code> and run the following bash script: <pre><code>mkdir -p ./{arm64-v8a,armeabi-v7a,x86,x86_64} &amp;&amp; echo \"Folder structure created successfully.\"\n</code></pre> Then it's time to populate your folders with the files you need. You can either add whetever you needed or, do what I'm going to instruct on next: add the <code>libc++_shared.so</code>.</p>","tags":["debugging","solution"]},{"location":"blog/2024/01/22/adding-custom-libraries-to-the-flutter-apk-build/#adding-the-libc_sharedso-file-to-your-jnilib-folder","title":"Adding the <code>libc++_shared.so</code> file to your <code>jniLib/</code> folder","text":"<p>The standard share library <code>libc++_shared.so</code> is part of the android development kit, that gets installed by android studio (I assume this is already done and that you know about how it works). You can obtain the library by copying directly from your android SDK. Go to wherever you installed the android_sdk and look for this folder <code>android_sdk/ndk/&lt;version-number&gt;/toolchains/llvm/prebuilt/&lt;OS&gt;/sysroot/usr/lib</code> and in that <code>lib/</code> folder and search for <code>libc++_shared.so</code>. You can also search for the file using your operating system search function higher up in the <code>ndk</code> file structure if you want, the main objective is to find it.</p> <p>Once found you can simply copy &amp; paste it into the folders you created in the <code>jniLib/</code> folder within the flutter project and then retry building your app. It's likely that you either have a working app, or at least a new error message that isn't related to missing this library anymore.</p> <p>Personally I came across this problem while working with <code>rinf</code> for flutter and as a reference I figured things out while troubleshooting this github issue.</p>","tags":["debugging","solution"]},{"location":"blog/2023/10/01/hello-world/","title":"Hello world","text":"<p>Testing blog function</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>...</p>"},{"location":"blog/2023/10/02/building-this-site/","title":"Building this site","text":"<p>During my research of possible solutions, I've iterated through Wordpress, Jekyll, pure html-css-js, and a few more. But now finally landed on mkdocs, which I feel pretty comfortable with. Easy to use, and I can keep it in a git repository.</p>"},{"location":"blog/2023/10/02/building-this-site/#mkdocs","title":"Mkdocs","text":"<p>This specific setup uses Mkdocs as its base, then I've added the material theme, and a few plugins. For the time being, I've got a more than average complex setup, that splits the site in to two separate mkdocs project. One project for the blog and one for the rest of the site. It's put together into one site using the github action workflow, triggered on each push on the main branch. The benefits as I see them is that now I can use different plugins / themes for the blog and the rest of the site. And the best part is that merging these into a single mkdocs site is pretty easy to do in the future. But that will wait until the blog functionality is part of the stable branch, when I will reevaluate the setup.</p>"},{"location":"blog/2023/10/02/building-this-site/#useful-resources","title":"Useful resources","text":"<p>I've come across some useful resources for managing mkdocs sites and I will list them here for future reference:</p> <ul> <li>Mkdocs</li> <li>Material theme</li> <li>Code Inside Out: MKdocs walkthrough</li> <li>Its github repo</li> </ul>"},{"location":"blog/2023/10/02/testing-mermaid-in-mkdocs-markdown/","title":"Testing mermaid in mkdocs markdown","text":"<p>Found a mermaid plugin for mkdocs, and I'm testing it out.</p> graph LR   A[Start] --&gt; B{Error?};   B --&gt;|Yes| C[Hmm...];   C --&gt; D[Debug];   D --&gt; B;   B ----&gt;|No| E[Yay!];  <p>Credit to: https://www.codeinsideout.com/blog/site-setup/mkdocs-plugins/#mermaid</p>"},{"location":"blog/2023/10/06/hello-world-browser-plugin/","title":"Hello World: Browser plugin","text":"<p>I just tested building a browser plugin, it was easier than I thought. Here I'll walk you through the steps of creating a minimal working example of a browser plugin, a.k.a. the \"Hello World\" of browser plugins.</p> <p>First of all there are two main browser platforms out there, Chromium and Mozilla. They do some things a little differently, but similar enough that we can build a plugin that works on both. This plugin will work in both, I'll describe the firefox version, but the chromium version is very similar.</p>"},{"location":"blog/2023/10/06/hello-world-browser-plugin/#what-is-a-browser-plugin","title":"What is a browser plugin?","text":"<p>Simply put, a browser plugin is a program that runs in the browser. It can do things like modify the content of a webpage, or add new functionality to the browser. It's a way to extend the browser with custom functionality. Common examples are ad blockers, password managers, and video downloaders.</p> <p>In technical terms, they are plugins that can insert html-css-js into your browser experience.</p>"},{"location":"blog/2023/10/06/hello-world-browser-plugin/#how-to-build-a-browser-plugin","title":"How to build a browser plugin","text":""},{"location":"blog/2023/10/06/hello-world-browser-plugin/#step-0-basics","title":"Step 0: Basics","text":"<p>You'll need a computer, a text editor and a browser. For testing and development I personally think that the firefox developer edition is the easiest to work with. But any Chrome based browser will also do.</p> <p>Create a working directory on your computer, name it anything you like. I'll call mine <code>hello-world-browser-plugin</code>. Open the directory and create a file called <code>manifest.json</code>. This is the most important file of your plugin, and it must be named exactly right.</p>"},{"location":"blog/2023/10/06/hello-world-browser-plugin/#step-1-manifestjson","title":"Step 1: manifest.json","text":"<p>After creation open your file <code>manifest.json</code> in your text editor and paste the following code:</p> <pre><code>{\n    \"manifest_version\": 3,\n    \"name\": \"Hello World\",\n    \"version\": \"1.0\",\n    \"description\": \"A simple 'Hello World' browser extension\",\n    \"content_scripts\": [\n        {\n        \"matches\": [\"&lt;all_urls&gt;\"],\n        \"js\": [\"hello.js\"]  //The name of your script file.\n        // \"css\": [\"hello.css\"]  //The name of your css file.\n        }\n    ]\n}\n</code></pre> <p>If you wonder what the <code>json</code> file format is, it's a normal text file with a special syntax such that a computer can easily read it. It's the <code>json</code> syntax you see in the code above. Let's go through what's being said here. (If you are not interested, just skip to the next step after pasting this we are done here.)</p> <ul> <li><code>manifest_version</code>: This is the version of the manifest file format. It's currently at version 3, and it's the latest version. It's important that you set this to 3, otherwise your plugin won't work.</li> <li><code>name</code>: This is the name of your plugin. It can be anything you like.</li> <li><code>version</code>: This is the version of your plugin. It can be anything you like.</li> <li><code>description</code>: This is the description of your plugin. It can be anything you like.</li> <li><code>content_scripts</code>: This is where you define what your plugin does. It's a list of scripts that will be executed when the browser loads a webpage. In this case we have one script, called <code>hello.js</code>. It's the script that we'll create in the next step.</li> <li><code>matches</code>: This is a list of urls that the script will be executed on. In this case we have <code>&lt;all_urls&gt;</code>, which means that the script will be executed on all urls. You can also specify a specific url, like <code>https://brave.com/*</code>, which means that the script will only be executed on urls that start with <code>https://brave.com/</code>.</li> <li><code>js</code>: This is a list of javascript files that will be executed. In this case we have one file, called <code>hello.js</code>. It's the script that we'll create in the next step.</li> <li><code>css</code>: This is where you can add a list of css files that will be executed. In this case we have none, but you can add css files here if you want to.</li> <li><code>//</code>: Text following these two characters are comments. They are ignored by the computer, You can add comments anywhere you like, and they are a good way to document your code.</li> </ul>"},{"location":"blog/2023/10/06/hello-world-browser-plugin/#step-2-hellojs","title":"Step 2: hello.js","text":"<p>Now it's time to create another file in your project folder. This time we'll call it <code>hello.js</code>. When created, open it in your text editor and paste the following code:</p> <p><pre><code>console.log(\"Hello World!\");\n</code></pre> That's javascript code, and it's what will be executed when you run your plugin. It's a simple <code>console.log</code> statement, which will print the text \"Hello World!\" to the console. The console is a place where the browser prints out messages, and it's a good place to start when debugging your plugin.</p>"},{"location":"blog/2023/10/06/hello-world-browser-plugin/#step-3-load-and-launch-your-plugin","title":"Step 3: Load and launch your plugin","text":""},{"location":"blog/2023/10/06/hello-world-browser-plugin/#firefox","title":"Firefox","text":"<p>Now it's time to load your plugin into your browser. Open your browser and go to the url <code>about:debugging#/runtime/this-firefox</code>. You should see a page that looks something like this: </p> <p>Click the button that says \"Load Temporary Add-on...\". A file dialog will open, navigate to your project folder and select the file <code>manifest.json</code>. Your plugin should now be loaded and running.</p> <p>Go to a website, any website, and open the inspector then navigate to the console. You'll find the inspector by right-clicking anywhere within the webpage, and click \"Inspector\" in the drop-down menu. When opening the console you might see some log messages from the site you visited and... you should see the text \"Hello World!\" printed there, from our little plugin! Congratulations!</p> <p></p>"},{"location":"blog/2023/10/06/hello-world-browser-plugin/#chrome","title":"Chrome","text":"<p>Open your browser and go to the url <code>chrome://extensions/</code>. Click the button that says \"Load unpacked\". A file dialog will open, navigate to your project folder and select the folder <code>hello-world-browser-plugin</code>. Your plugin should now be loaded and running.</p> <p>Note the difference, of selecting the file <code>manifest.json</code> in firefox, and selecting the folder <code>hello-world-browser-plugin</code> in chrome. Otherwise, the process is the same. So I'll repeat the same text as above: (for those who skipped ahead..)</p> <p>Go to a website, any website, and open the inspector then navigate to the console. You'll find the inspector by right-clicking anywhere within the webpage, and click \"Inspector\" in the drop-down menu. When opening the console you might see some log messages from the site you visited and... you should see the text \"Hello World!\" printed there, from our little plugin! Congratulations!</p> <p>As you can see this isn't as complicated as one might think. Having preformed a \"Hello-World!\"-project is a very useful and valuable first step. These setup steps are the basics for any browser plugin, and you can build on this to create more advanced plugins.</p>"},{"location":"blog/2023/10/11/mt3001-prob1-01/","title":"Basic probability theory, MT3001 module 1 / 15","text":"","tags":["SU-MT3001"]},{"location":"blog/2023/10/11/mt3001-prob1-01/#introduction","title":"Introduction","text":"<p>Probability theory is the study of random phenomena. It is used in many fields, such as statistics, machine learning, and finance. It is also used in everyday life, for example when playing games of chance, or when estimating the risk of an event. The most classic example is the coin toss, closely followed by the dice roll.</p> <p>When we toss a coin, the result is either heads or tails. In the case of an ideal coin, the \"random trail\" of tossing the coin has an equal probability for both outcomes. Similarly, for a die roll of a fair dice, we know that the probability for each outcome is 1/6. In the study of probability we dive deep into the mathematics of these random phenomena, how to model them, and how to calculate the probability of different events. To do this in precise terms, we define words and concepts as tools for discussing and communicating about the subject.</p> <p>This is the first of what I expect to be a 15 part series of my lecture &amp; study notes from my university course in probability theory MT3001 at Stockholm University. References to definitions and theorems will use their numeration in the course literature, even if I may rephrase them myself. The book I've had as a companion through this course is a Swedish book called Stokastik by Sven Erick Alm and Tom Britton; ISBN:978-91-47-05351-3. This first module concerns basic concepts and definitions, needed for the rest of the course.</p>","tags":["SU-MT3001"]},{"location":"blog/2023/10/11/mt3001-prob1-01/#the-language-of-probability-theory","title":"The language of Probability theory","text":"<p>An experiment is a process that produces a randomized result. If our experiment is throwing a die, we then have the following: The result of throwing the die is called an outcome, the set of all possible outcomes is called the sample space and a subset of the sample space is called an event. We will use the following notation:</p> <ul> <li>outcome is the result of an experiment, denoted with a small letter, ex. \\(u_1\\), \\(u_2\\), \\(u_3\\), ...</li> <li>event is the subset of the sample space, denoted with a capital letter, ex. \\(A\\), \\(B\\), \\(C\\), ...</li> <li>sample space is the set of all possible outcomes of an experiment, denoted \\(\\Omega\\).</li> </ul> <p>Adding numbers to our dice example, we have the sample space \\(\\Omega = \\{1,2,3,4,5,6\\}\\) containing all the possible events \\(u_1=1, u_2=2, u_3=3, u_4=4, u_5=5\\) and \\(u_6=6\\). And we could study some specific sub events like the chance of getting an even number, \\(A=\\{2,4,6\\}\\), or the chance of getting a prime number, \\(B=\\{2,3,5\\}\\). As it happens, the probability of both \\(A\\) and \\(B\\) is 50%.</p>","tags":["SU-MT3001"]},{"location":"blog/2023/10/11/mt3001-prob1-01/#sample-space","title":"Sample space","text":"<p>The sample space is the set of all possible outcomes of an experiment. It is denoted \\(\\Omega\\). And there are two types of sample spaces, discrete and continuous. A discrete sample space is a finite or countably infinite set, and all other kind of sample spaces are called continuous.</p> <p>The coin toss and the dice roll are both examples of discrete sample spaces. Studying a problem, like the temperature outside, would in reality require a continuous sample space. But in practice, we can often approximate a continuous sample space with a discrete one. For example, we could divide the temperature into 10 degree intervals, and then we would have a discrete sample space.</p> <p>Remember that continuous sample spaces exist, and expect more information about them in later modules. For starters, we focus on discrete sample spaces.</p>","tags":["SU-MT3001"]},{"location":"blog/2023/10/11/mt3001-prob1-01/#set-theory-notation-and-operations","title":"Set Theory notation and operations","text":"<p>When talking about probabilities we will arm ourselves with the language of \"set theory\", it is a crucial tool for the study of probability. Feeling comfortable with the subject of set theory since before is useful, but not necessary. I will try to explain the concepts as we go along.</p> <p>Even tough the events from the dice rolls are represented by numbers, it is important to note that they aren't numbers, but rather elements. This might become more clear if we alter our example to be a deck of cards. This deck of cards have four suits \\(\\Omega = \\{\\heartsuit, \\spadesuit, \\diamondsuit, \\clubsuit \\}\\) and in our experiments we draw a card from the deck and look at the suit. It's here very obvious that we can't add or subtract the different events with each other. But we do have the operations of set theory at our disposal. For example, if \\(A\\) is the event of drawing a red card and \\(B\\) is the event of drawing spades \\(\\spadesuit\\), we can use the following notation:</p> <ul> <li>\\(A=\\{\\heartsuit, \\diamondsuit\\}\\)</li> <li>\\(B=\\{\\spadesuit\\}\\)</li> </ul>","tags":["SU-MT3001"]},{"location":"blog/2023/10/11/mt3001-prob1-01/#set-theory-operations","title":"Set theory operations","text":"<ul> <li>Union: \\(A \\cup B = \\{\\heartsuit, \\diamondsuit, \\spadesuit\\}\\), the union of \\(A\\) and \\(B\\).</li> <li>The empty set: \\(\\emptyset = \\{\\}\\), the empty set. A set with no elements.</li> <li>Intersection: \\(A \\cap B = \\emptyset\\), the intersection of \\(A\\) and \\(B\\).</li> <li>This means that \\(A\\) and \\(B\\) have no elements in common. And we say that \\(A\\) and \\(B\\) are disjoint.</li> <li>Complement: \\(A^c = \\{\\spadesuit, \\clubsuit\\}\\), the complement of \\(A\\).</li> <li>Difference: \\(A \\setminus B = \\{\\heartsuit, \\diamondsuit\\}\\), the difference of \\(A\\) and \\(B\\). Equivalent to \\(A \\cap B^c\\).</li> <li>The symbol \\(\\in\\) denotes that an element is in a set. For example, \\(u_1 \\in \\Omega\\) means that the outcome \\(u_1\\) is in the sample space \\(\\Omega\\). For our example: \\(\\heartsuit \\in A\\) means that the suit \\(\\heartsuit\\) is in the event \\(A\\).</li> </ul>","tags":["SU-MT3001"]},{"location":"blog/2023/10/11/mt3001-prob1-01/#venn-diagram","title":"Venn diagram","text":"<p>A very useful visualization of set theory is the Venn diagram. Here is an example of a Venn diagram in the picture below: </p> <p>In the above illustration we have: \\(\\Omega = \\{1,2,3,4\\}\\) and the two events \\(A=\\{2,3\\}\\) and \\(B=\\{3,4\\}\\). Notice how the two sets \\(A\\) and \\(B\\) share the element \\(3\\), and that all sets are subsets of the sample space \\(\\Omega\\). The notation for the shared element \\(3\\) is \\(A \\cap B = \\{3\\}\\).</p>","tags":["SU-MT3001"]},{"location":"blog/2023/10/11/mt3001-prob1-01/#useful-phrasing","title":"Useful phrasing","text":"<p>The different set notations may seem a bit abstract at first, at least before you are comfortable with them. Something that might be useful to do is to read them with the context of probabilities in mind. Doing this, we can read some of the different set notations as follows:</p> <ul> <li>\\(A^c\\), \"when \\(A\\) doesn't happen\".</li> <li>\\(A \\cup B\\), \"when at least one of \\(A\\) or \\(B\\) happens\".</li> <li>\\(A \\cap B\\), \"when both \\(A\\) and \\(B\\) happens\".</li> <li>\\(A \\cap B^c\\), \"when \\(A\\) happens but \\(B\\) doesn't happen\".</li> </ul>","tags":["SU-MT3001"]},{"location":"blog/2023/10/11/mt3001-prob1-01/#the-probability-function","title":"The Probability function","text":"<p>Functions map elements from one set to another. In probability theory, we are interested in mapping events to their corresponding probabilities. We do this using what we call a probability function. This function is usually denoted \\(P\\) and have some requirements that we will go through in the definition below.</p> <p>This function take events as input and outputs the probability of that event. For the example of a die throw, if we have the event \\(A=\\{2,4,6\\}\\), then \\(P(A)\\) is the probability of getting an even number when throwing a fair six sided dice. In this case \\(P(A)=\\frac{1}{2}=P(\\text{\"even number from a dice throw\"})\\), you'll notice that variations of descriptions of the same event can be used interchangeably.</p> <p>The Russian mathematician Andrey Kolmogorov (1903-1987) is considered the father of modern probability theory. He formulated the following three axioms for probability theory:</p> <p>From these axioms it's implied that \\(P(A) \\in [0,1]\\), which makes sense since things aren't less than impossible or more than certain. As a rule of thumb, when talking about probabilities, we move within the range of 0 and 1. This lets us formulate the following theorem:</p>","tags":["SU-MT3001"]},{"location":"blog/2023/10/11/mt3001-prob1-01/#definition-22-kolmogorovs-axioms","title":"Definition 2.2, Kolmogorov's axioms","text":"<p>A real-valued function \\(P\\) defined on a sample space \\(\\Omega\\) is called a &gt;probability function if it satisfies the following three axioms:</p> <ol> <li>\\(P(A) \\geq 0\\) for all events \\(A\\).</li> <li>\\(P(\\Omega) = 1\\).</li> <li>If \\(A_1, A_2, A_3, ...\\) are disjoint events, then \\(P(A_1 \\cup A_2 \\cup A_3 \\cup ...) = P(A_1) + P(A_2) + P(A_3) + ...\\). This is called the countable additivity axiom.</li> </ol>","tags":["SU-MT3001"]},{"location":"blog/2023/10/11/mt3001-prob1-01/#theorem-21-the-complement-and-addition-theorem-of-probability","title":"Theorem 2.1, The Complement and Addition Theorem of probability","text":"<p>Let \\(A\\) and \\(B\\) be two events in a sample space \\(\\Omega\\). Then the following statements are true: 1. \\(P(A^c) = 1 - P(A)\\) 2. \\(P(\\emptyset) = 0\\) 3. \\(P(A \\cup B) = P(A) + P(B) - P(A \\cap B)\\)</p>","tags":["SU-MT3001"]},{"location":"blog/2023/10/11/mt3001-prob1-01/#proof-of-theorem-21","title":"Proof of Theorem 2.1","text":"<ol> <li>\\(P(A \\cup A^c) = P(\\Omega) = 1 = P(A) + P(A^c) \\Rightarrow P(A^c) = 1 - P(A)\\)<ul> <li>This simply proves that the probability of \\(A\\) not happening is the same as the probability of \\(A\\) happening subtracted from 1.</li> </ul> </li> <li>\\(P(\\emptyset) = P(\\Omega^c) = 1 - P(\\Omega) = 1 - 1 = 0\\)</li> <li>Even though our formal proof required (1) to be proven, it's also very intuitive that the probability of the empty set is 0. Since the empty set is the set of all elements that are not in the sample space, and the probability of an event outside the sample space is 0.</li> <li>\\(P(A \\cup B) = P(A \\cup (B \\cap A^c)) = P(A) + P(B \\cap A^c) = P(A) + P(B) - P(A \\cap B)\\)</li> <li>This can be understood visually by revisiting our Venn diagram. We see that the union of \\(A\\) and \\(B\\) has an overlapping element \\(3\\) shared between them. This means that purely adding the elements of \\(A=\\{2,3\\}\\) together with \\(B=\\{3,4\\}\\) would double count that shared element, like this \\(\\{2,3,3,4\\}\\), since we have two \"copies\" of the mutual elements we make sure to remove one \"copy\" bur removing \\(P(A \\cap B)=\\{3\\}\\) and we get \\(P(A \\cup B)=\\{2,3,4\\}\\). We may refer to this process as dealing with double counting, something that is very important to have in mind when dealing with sets. </li> </ol> <p>Two interpretations of probability that are useful and often used are the frequentist and the subjectivist interpretations. The frequentist interpretation is that the probability of an event is the relative frequency of that event in the long run. The subjectivist interpretation is that the probability of an event is the degree of belief that the event will occur, this is very common in the field of statistics and gambling. For the purposes of study it's also useful to sometimes consider probabilities as areas and or masses, this is called the measure theoretic interpretation. Don't let that word scare you off, in our context it's just a fancy way of drawing a parallel between areas and probabilities. Think area under curves, and you'll be fine.</p>","tags":["SU-MT3001"]},{"location":"blog/2023/09/30/rust-axum-hello-world/","title":"Rust-Axum: Hello World!","text":"<p>Setting up a minimal working example of an Axum server. First up! Start a new rust project, assuming you already have installed cargo on your system. (If not, follow these steps to install cargo.) Open your terminal in a suitable location and run:</p> <pre><code>cargo new axum_hello_world; cd axum_hello_world\n</code></pre> <p>Now edit the cargo.toml file so that all needed dependencies are included:</p> <pre><code>[dependencies]\naxum = \"0.6.20\"\nhyper = { version = \"0.14.27\", features = [\"full\"] }\ntokio = { version = \"1.32.0\", features = [\"full\"] }\ntower = \"0.4.13\"\n</code></pre> <p>You may use later versions of these, but take note that this solution described is only tested for the given cargo file.</p> <p>Now it\u2019s time to add code to the main.rs file. Start by importing the use of the axum module and the needed items, we add this to the top of our main.rs file:</p> <pre><code>use axum::{routing::get, Router,};\n</code></pre> <p>Now, when rust knows what to use from its cargo, we go on to developing the main() function. When working with axum we do something special that\u2019s normally not allowed in rust, and that is to declare the main function as being an async (asynchronous) function. To make this work, the Axum framework cooperates with the tokio package. And a little tokio reference must be added before the function like this:</p> <pre><code>#[tokio::main]\nasync fn main() {\n\n}\n</code></pre> <p>Now it\u2019s ready for some action. We declare a variable (name it whatever you want) and name it \u201capp\u201d, then we let this hold an instance of an Axum Router:</p> <pre><code>#[tokio::main]\nasync fn main() {\n    // build our application with a single route\n    let app = Router::new().route(\"/\", get(|| async { \"Hello, World!\" }));\n}\n</code></pre> <p>PS; notice our little \u201cHello, World!\u201d message string dropped in the router. This is the info that the router will deliver when called in the next piece of code. Where\u2026</p> <p>It\u2019s time to serve! Now we initiate an axum server, and binds it to one of our local networking ports. And we\u2019ll add our \u201capp\u201d for the server to serve, wen being called by an user / client:</p> <pre><code>    // run it with hyper on localhost:3000\n    axum::Server::bind(&amp;\"0.0.0.0:3000\".parse().unwrap())\n    .serve(app.into_make_service())\n    .await\n    .unwrap();\n</code></pre> <p>Putting all the pieces together, our minimal working code looks like this:</p> <pre><code>use axum::{\n    routing::get,\n    Router,\n};\n\n#[tokio::main]\nasync fn main() {\n    // build our application with a single route\n    let app = Router::new().route(\"/\", get(|| async { \"Hello, World!\" }));\n\n    // run it with hyper on localhost:3000\n    axum::Server::bind(&amp;\"0.0.0.0:3000\".parse().unwrap())\n        .serve(app.into_make_service())\n        .await\n        .unwrap();\n}\n</code></pre> <p>And to do a test run, you have to build your executable. The following commands are the ones I usually use while iterating my code:</p> <pre><code>cargo clean; cargo build; cargo run\n</code></pre> <p>Run them in the terminal, and then visit \u201clocalhost:3000\u201d in your browser. If everything checks out, you will see a \u201cHello, World!\u201d message in the browser window. Nothing fancy, but a little sign and glimmer of hope that things can actually work in this world.</p> <p>Thanks for reading, I hope this was useful. This was my first test at writing a medium article. Feedback appreciated, I think? ;) I might be doing some more Axum basics coming up. The speed and efficiency of rust, combined with its easy use of cargo, makes it very appealing even for webbdev I think. So further exploration of its capabilities is on my list.</p>"},{"location":"portfolio/","title":"Portfolio \ud83d\uddc3\ufe0f\ud83d\udea7Under construction!\ud83d\udc77\ud83c\udfd7\ufe0f","text":"<p>Lots of files: \ud83d\udcc1</p> <p>I'm specializing in the Rust programming language. Quick, fast and well-structured code is the deal. Always learning, always perfecting. I'm especially interested in high performance code, and optimizations. If you got something interesting cooking, connect!</p> <p>For an interesting enough project I'm willing to work for $4000 / month, otherwise you'll have to bid against my other available opportunities or active employments / contracts.</p> <p>My specialities: * The rust programming language, for a multitude of applications. * Machine Learning with Pytorch. * CUDA programming, for NVIDIA GPU units. * App development using Flutter &amp; Rust for really speedy optimized apps. * Amazon AWS &amp; general webb problem solving and set ups</p> <p>Contact: tech.victoriee.com/blog/contact/</p> <p>nostr: npub1lgqktg83jtasayw8mpcsu46hptf8kdc4effps8mv20ymyqeewpes09l4ps (ps, I don't use the nostr DMs but you can @ me)</p>"},{"location":"blog/archive/2024/","title":"2024","text":""},{"location":"blog/archive/2023/","title":"2023","text":""},{"location":"blog/category/flutter/","title":"flutter","text":""},{"location":"blog/category/mathematics/","title":"Mathematics","text":""},{"location":"blog/category/probability-theory/","title":"Probability theory","text":""},{"location":"blog/page/2/","title":"Blog Feed","text":""},{"location":"blog/archive/2023/page/2/","title":"2023","text":""},{"location":"blog/taxonomy/","title":"Taxonomy","text":""},{"location":"blog/taxonomy/#categories","title":"Categories","text":"<ul> <li>Mathematics<ul> <li>Probability Theory</li> </ul> </li> <li>Programming</li> </ul>"},{"location":"blog/taxonomy/#tags","title":"Tags","text":"<p>Following is a list of all existing tags:</p>"},{"location":"blog/taxonomy/#su-mt3001","title":"SU-MT3001","text":"<ul> <li>Basic probability theory, MT3001 module 1 / 15</li> </ul>"},{"location":"blog/taxonomy/#debugging","title":"debugging","text":"<ul> <li>Adding custom libraries to the flutter apk build</li> </ul>"},{"location":"blog/taxonomy/#solution","title":"solution","text":"<ul> <li>Adding custom libraries to the flutter apk build</li> </ul>"}]}